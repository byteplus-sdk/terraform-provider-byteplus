package waf_vulnerability

import (
	"errors"
	"fmt"
	"time"

	bp "github.com/byteplus-sdk/terraform-provider-byteplus/common"
	"github.com/byteplus-sdk/terraform-provider-byteplus/logger"
	"github.com/hashicorp/terraform-plugin-sdk/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
)

type ByteplusWafVulnerabilityService struct {
	Client     *bp.SdkClient
	Dispatcher *bp.Dispatcher
}

type SystemRuleSwitch struct {
	RuleID                 int
	CustomSystemRuleSwitch int
}

func NewWafVulnerabilityService(c *bp.SdkClient) *ByteplusWafVulnerabilityService {
	return &ByteplusWafVulnerabilityService{
		Client:     c,
		Dispatcher: &bp.Dispatcher{},
	}
}

func (s *ByteplusWafVulnerabilityService) GetClient() *bp.SdkClient {
	return s.Client
}

func (s *ByteplusWafVulnerabilityService) ReadResources(m map[string]interface{}) (data []interface{}, err error) {
	return nil, nil
}

func (s *ByteplusWafVulnerabilityService) ReadResource(resourceData *schema.ResourceData, id string) (data map[string]interface{}, err error) {
	var (
		resp     *map[string]interface{}
		ruleResp *map[string]interface{}
		//results []interface{}
		//ok      bool
	)
	if id == "" {
		id = s.ReadResourceId(resourceData.Id())
	}

	req := map[string]interface{}{
		"Host": id,
	}
	action := "GetVulnerabilityConfig"
	resp, err = s.Client.UniversalClient.DoCall(getUniversalInfo(action), &req)
	if err != nil {
		return data, err
	}
	logger.Debug(logger.RespFormat, action, req, *resp)

	vulnerabilityConfig, err := bp.ObtainSdkValue("Result", *resp)
	if err != nil {
		return data, err
	}
	data, ok := vulnerabilityConfig.(map[string]interface{})
	if !ok {
		return data, fmt.Errorf(" Result is not Map ")
	}

	if len(data) == 0 {
		return data, fmt.Errorf("vulnerabilityConfig %s not exist", id)
	}

	if advanceConfigs, advanceConfigExist := data["AdvanceConfig"]; advanceConfigExist {

		advanceConfigsMap, ok := advanceConfigs.(map[string]interface{})
		if !ok {
			return data, errors.New("AdvanceConfig is not Map ")
		}
		if autoTraversals, autoTraversalExist := advanceConfigsMap["AutoTraversal"]; autoTraversalExist {
			advanceConfigs.(map[string]interface{})["AutoTraversal"] = []interface{}{
				autoTraversals,
			}

			if rule, ruleExist := autoTraversals.(map[string]interface{})["Rule"]; ruleExist {
				autoTraversals.(map[string]interface{})["Rule"] = []interface{}{
					rule,
				}
			}
		}
	}

	if advanceConfigs, advanceConfigExist := data["AdvanceConfig"]; advanceConfigExist {
		advanceConfigsMap, ok := advanceConfigs.(map[string]interface{})
		if !ok {
			return data, errors.New("AdvanceConfig is not Map ")
		}
		if freqScans, freqScanExist := advanceConfigsMap["FreqScan"]; freqScanExist {
			advanceConfigs.(map[string]interface{})["FreqScan"] = []interface{}{
				freqScans,
			}
			if rule, ruleExist := freqScans.(map[string]interface{})["Rule"]; ruleExist {
				freqScans.(map[string]interface{})["Rule"] = []interface{}{
					rule,
				}
			}
		}
	}

	// 查询规则详情
	ruleReq := map[string]interface{}{
		"Host":     id,
		"RuleMode": "custom",
	}
	ruleAction := "ListVulnerabilityRule"
	ruleResp, err = s.Client.UniversalClient.DoCall(getUniversalInfo(ruleAction), &ruleReq)
	if err != nil {
		return data, err
	}
	logger.Debug(logger.RespFormat, ruleAction, ruleReq, *ruleResp)
	ruleDetails, err := bp.ObtainSdkValue("Result.RuleDetail", *ruleResp)
	if err != nil {
		return data, err
	}
	if ruleDetails == nil {
		ruleDetails = []interface{}{}
	}
	ruleDatas, ok := ruleDetails.([]interface{})
	if !ok {
		return data, fmt.Errorf(" ruleData is not Map ")
	}
	data["RuleDetail"] = ruleDatas

	var SystemRuleSwitchList []interface{}
	if resourceData.Get("system_rule_switch") != nil {
		for _, rule := range resourceData.Get("system_rule_switch").([]interface{}) {
			for _, ruleData := range ruleDatas {
				ruleMap, ok := ruleData.(map[string]interface{})
				if !ok {
					return data, fmt.Errorf(" rule is not Map ")
				}
				ruleMapId, ok := ruleMap["RuleID"].(float64)
				if !ok {
					return data, fmt.Errorf(" ruleMapId is not int ")
				}

				ruleId, ok := rule.(map[string]interface{})["rule_id"].(int)
				if !ok {
					return data, fmt.Errorf(" rule_id is not int ")
				}
				customSystemRuleSwitch, ok := rule.(map[string]interface{})["custom_system_rule_switch"].(int)
				if int(ruleMapId) == ruleId {
					systemRuleSwitch := map[string]interface{}{
						"RuleID":                 ruleId,
						"CustomSystemRuleSwitch": customSystemRuleSwitch,
					}
					SystemRuleSwitchList = append(SystemRuleSwitchList, systemRuleSwitch)
				}
			}
		}
		data["SystemRuleSwitch"] = SystemRuleSwitchList
		logger.Debug(logger.RespFormat, "SystemRuleSwitch data is", SystemRuleSwitchList, data["SystemRuleSwitch"])
	}

	data["Host"] = id

	return data, err
}

func (s *ByteplusWafVulnerabilityService) RefreshResourceState(resourceData *schema.ResourceData, target []string, timeout time.Duration, id string) *resource.StateChangeConf {
	return &resource.StateChangeConf{}
}

func (s *ByteplusWafVulnerabilityService) CreateResource(resourceData *schema.ResourceData, resource *schema.Resource) []bp.Callback {
	callback := bp.Callback{
		Call: bp.SdkCall{
			Action:      "UpdateVulnerabilityConfig",
			ConvertMode: bp.RequestConvertAll,
			ContentType: bp.ContentTypeJson,
			Convert: map[string]bp.RequestConvert{
				"advance_config": {
					ConvertType: bp.ConvertJsonObject,
					TargetField: "AdvanceConfig",
					NextLevelConvert: map[string]bp.RequestConvert{
						"auto_traversal": {
							ConvertType: bp.ConvertJsonObject,
							TargetField: "AutoTraversal",
							NextLevelConvert: map[string]bp.RequestConvert{
								"rule_tag": {
									TargetField: "RuleTag",
								},
								"enable": {
									TargetField: "Enable",
								},
								"rule": {
									ConvertType: bp.ConvertJsonObject,
									TargetField: "Rule",
									NextLevelConvert: map[string]bp.RequestConvert{
										"response_http_status": {
											TargetField: "ResponseHttpStatus",
											ConvertType: bp.ConvertJsonArray,
										},
									},
								},
							},
						},
						"freq_scan": {
							ConvertType: bp.ConvertJsonObject,
							TargetField: "FreqScan",
							NextLevelConvert: map[string]bp.RequestConvert{
								"rule_tag": {
									TargetField: "RuleTag",
								},
								"enable": {
									TargetField: "Enable",
								},
								"rule": {
									ConvertType: bp.ConvertJsonObject,
									TargetField: "Rule",
								},
							},
						},
					},
				},
				"system_rule_switch": {
					ConvertType: bp.ConvertJsonObjectArray,
					TargetField: "SystemRuleSwitch",
					NextLevelConvert: map[string]bp.RequestConvert{
						"rule_id": {
							TargetField: "RuleID",
						},
						"custom_system_rule_switch": {
							TargetField: "CustomSystemRuleSwitch",
						},
					},
				},
			},
			ExecuteCall: func(d *schema.ResourceData, client *bp.SdkClient, call bp.SdkCall) (*map[string]interface{}, error) {
				logger.Debug(logger.RespFormat, call.Action, call.SdkParam)
				resp, err := s.Client.UniversalClient.DoCall(getUniversalInfo(call.Action), call.SdkParam)
				logger.Debug(logger.RespFormat, call.Action, resp, err)
				return resp, err
			},
			AfterCall: func(d *schema.ResourceData, client *bp.SdkClient, resp *map[string]interface{}, call bp.SdkCall) error {
				host, ok := d.Get("host").(string)
				if !ok {
					return errors.New("host is not string")
				}
				d.SetId(host)
				return nil
			},
		},
	}
	return []bp.Callback{callback}
}

func (ByteplusWafVulnerabilityService) WithResourceResponseHandlers(d map[string]interface{}) []bp.ResourceResponseHandler {
	handler := func() (map[string]interface{}, map[string]bp.ResponseConvert, error) {
		return d, map[string]bp.ResponseConvert{
			"RuleID": {
				TargetField: "rule_id",
			},
			"CVEID": {
				TargetField: "cve_id",
			},
		}, nil
	}
	return []bp.ResourceResponseHandler{handler}
}

func (s *ByteplusWafVulnerabilityService) ModifyResource(resourceData *schema.ResourceData, resource *schema.Resource) (callbacks []bp.Callback) {
	if resourceData.HasChanges("rule_mode", "action", "advance_config") {
		updateVulnerabilityConfig := bp.Callback{
			Call: bp.SdkCall{
				Action:      "UpdateVulnerabilityConfig",
				ConvertMode: bp.RequestConvertInConvert,
				ContentType: bp.ContentTypeJson,
				Convert: map[string]bp.RequestConvert{
					"rule_mode": {
						TargetField: "RuleMode",
					},
					"action": {
						TargetField: "Action",
					},
					"advance_config": {
						ConvertType: bp.ConvertJsonObject,
						TargetField: "AdvanceConfig",
						NextLevelConvert: map[string]bp.RequestConvert{
							"auto_traversal": {
								ConvertType: bp.ConvertJsonObject,
								TargetField: "AutoTraversal",
								NextLevelConvert: map[string]bp.RequestConvert{
									"rule_tag": {
										TargetField: "RuleTag",
									},
									"enable": {
										TargetField: "Enable",
									},
									"rule": {
										ConvertType: bp.ConvertJsonObject,
										TargetField: "Rule",
										NextLevelConvert: map[string]bp.RequestConvert{
											"response_http_status": {
												TargetField: "ResponseHttpStatus",
												ConvertType: bp.ConvertJsonArray,
											},
										},
									},
								},
							},
							"freq_scan": {
								ConvertType: bp.ConvertJsonObject,
								TargetField: "FreqScan",
								NextLevelConvert: map[string]bp.RequestConvert{
									"rule_tag": {
										TargetField: "RuleTag",
									},
									"enable": {
										TargetField: "Enable",
									},
									"rule": {
										ConvertType: bp.ConvertJsonObject,
										TargetField: "Rule",
									},
								},
							},
						},
					},
				},
				BeforeCall: func(d *schema.ResourceData, client *bp.SdkClient, call bp.SdkCall) (bool, error) {
					(*call.SdkParam)["Host"] = d.Id()
					return true, nil
				},
				ExecuteCall: func(d *schema.ResourceData, client *bp.SdkClient, call bp.SdkCall) (*map[string]interface{}, error) {
					logger.Debug(logger.RespFormat, call.Action, call.SdkParam)
					resp, err := s.Client.UniversalClient.DoCall(getUniversalInfo("UpdateVulnerabilityConfig"), call.SdkParam)
					logger.Debug(logger.RespFormat, call.Action, resp, err)
					return resp, err
				},
				AfterCall: func(d *schema.ResourceData, client *bp.SdkClient, resp *map[string]interface{}, call bp.SdkCall) error {
					return nil
				},
			},
		}
		callbacks = append(callbacks, updateVulnerabilityConfig)
	}
	if resourceData.HasChange("system_rule_switch") {

		updateCustomSystemVulRule := bp.Callback{
			Call: bp.SdkCall{
				Action:      "UpdateCustomSystemVulRule",
				ConvertMode: bp.RequestConvertInConvert,
				ContentType: bp.ContentTypeJson,
				Convert: map[string]bp.RequestConvert{
					"system_rule_switch": {
						ConvertType: bp.ConvertJsonObjectArray,
						TargetField: "SystemRuleSwitch",
						NextLevelConvert: map[string]bp.RequestConvert{
							"rule_id": {
								TargetField: "RuleID",
							},
							"custom_system_rule_switch": {
								TargetField: "CustomSystemRuleSwitch",
							},
						},
					},
				},
				BeforeCall: func(d *schema.ResourceData, client *bp.SdkClient, call bp.SdkCall) (bool, error) {
					(*call.SdkParam)["Host"] = d.Id()
					return true, nil
				},
				ExecuteCall: func(d *schema.ResourceData, client *bp.SdkClient, call bp.SdkCall) (*map[string]interface{}, error) {
					logger.Debug(logger.RespFormat, call.Action, call.SdkParam)
					resp, err := s.Client.UniversalClient.DoCall(getUniversalInfo("UpdateCustomSystemVulRule"), call.SdkParam)
					logger.Debug(logger.RespFormat, call.Action, resp, err)
					return resp, err
				},
				AfterCall: func(d *schema.ResourceData, client *bp.SdkClient, resp *map[string]interface{}, call bp.SdkCall) error {
					return nil
				},
			},
		}
		callbacks = append(callbacks, updateCustomSystemVulRule)
	}

	return callbacks
}

func (s *ByteplusWafVulnerabilityService) RemoveResource(resourceData *schema.ResourceData, r *schema.Resource) []bp.Callback {
	return []bp.Callback{}
}

func (s *ByteplusWafVulnerabilityService) DatasourceResources(*schema.ResourceData, *schema.Resource) bp.DataSourceInfo {
	return bp.DataSourceInfo{}
}

func (s *ByteplusWafVulnerabilityService) ReadResourceId(id string) string {
	return id
}

func getUniversalInfo(actionName string) bp.UniversalInfo {
	return bp.UniversalInfo{
		ServiceName: "waf",
		Version:     "2023-12-25",
		HttpMethod:  bp.POST,
		ContentType: bp.ApplicationJSON,
		Action:      actionName,
		RegionType:  bp.Global,
	}
}
