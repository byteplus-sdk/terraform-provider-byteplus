package waf_vulnerability

import (
	"fmt"
	"time"

	bp "github.com/byteplus-sdk/terraform-provider-byteplus/common"
	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
)

/*

Import
WafVulnerability can be imported using the id, e.g.
```
$ terraform import byteplus_waf_vulnerability.default resource_id
```

*/

func ResourceByteplusWafVulnerability() *schema.Resource {
	resource := &schema.Resource{
		Create: resourceByteplusWafVulnerabilityCreate,
		Read:   resourceByteplusWafVulnerabilityRead,
		Update: resourceByteplusWafVulnerabilityUpdate,
		Delete: resourceByteplusWafVulnerabilityDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(30 * time.Minute),
			Update: schema.DefaultTimeout(30 * time.Minute),
			Delete: schema.DefaultTimeout(30 * time.Minute),
		},
		Schema: map[string]*schema.Schema{
			"host": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Protect website domain names.",
			},
			"rule_mode": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: "The enabled vulnerability rule categories, WAF has classified the managed rules according to their strictness.",
			},
			"action": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: "Protection mode.",
			},
			"advance_config": {
				Type:     schema.TypeList,
				Optional: true,
				Computed: true,
				MaxItems: 1,
				Description: "The advanced configuration of vulnerability protection currently supports automatic " +
					"blocking of directory traversal attacks and high-frequency scanning attacks.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"auto_traversal": {
							Type:        schema.TypeList,
							Required:    true,
							MaxItems:    1,
							Description: "Configuration of the automatic blocking capability for directory traversal.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"rule": {
										Type:        schema.TypeList,
										Optional:    true,
										MaxItems:    1,
										Description: "Rule detail.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"field": {
													Type:        schema.TypeString,
													Required:    true,
													Description: "statistical object.",
												},
												"action": {
													Type:        schema.TypeInt,
													Required:    true,
													Description: "Disposal action.",
												},
												"count_time": {
													Type:        schema.TypeInt,
													Required:    true,
													Description: "Disposal action.",
												},
												"effect_time": {
													Type:        schema.TypeInt,
													Required:    true,
													Description: "Ban time (seconds).",
												},
												"hit_request_count": {
													Type:        schema.TypeInt,
													Required:    true,
													Description: "The number of request triggers.",
												},
												"effect_time_view_unit": {
													Type:        schema.TypeString,
													Required:    true,
													Description: "The body records the units displayed at the front end of the length: s, min, hour, and day.",
												},
												"response_http_status_hit_percent": {
													Type:        schema.TypeInt,
													Required:    true,
													Description: "Hit percentage: 0-99.",
												},
												"response_http_status": {
													Type:     schema.TypeSet,
													Required: true,
													Elem: &schema.Schema{
														Type: schema.TypeInt,
													},
													Set:         schema.HashInt,
													Description: "Response status code.",
												},
											},
										},
									},
									"rule_tag": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Directory traversal automatically blocks the rule label, that is, the complete rule ID.",
									},
									"enable": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: "Rule switch, controlling whether the current rule takes effect.",
									},
								},
							},
						},
						"freq_scan": {
							Type:        schema.TypeList,
							Required:    true,
							MaxItems:    1,
							Description: "Configuration of high-frequency scanning automatic blocking capability.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"rule": {
										Type:        schema.TypeList,
										Optional:    true,
										MaxItems:    1,
										Description: "Rule detail.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"field": {
													Type:        schema.TypeString,
													Required:    true,
													Description: "statistical object.",
												},
												"action": {
													Type:        schema.TypeInt,
													Required:    true,
													Description: "Disposal action.",
												},
												"count_time": {
													Type:        schema.TypeInt,
													Required:    true,
													Description: "Disposal action.",
												},
												"effect_time": {
													Type:        schema.TypeInt,
													Required:    true,
													Description: "Ban time (seconds).",
												},
												"hit_request_count": {
													Type:        schema.TypeInt,
													Required:    true,
													Description: "The number of request triggers.",
												},
												"effect_time_view_unit": {
													Type:        schema.TypeString,
													Required:    true,
													Description: "The body records the units displayed at the front end of the length: s, min, hour, and day.",
												},
											},
										},
									},
									"rule_tag": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Directory traversal automatically blocks the rule label, that is, the complete rule ID.",
									},
									"enable": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: "Rule switch, controlling whether the current rule takes effect.",
									},
								},
							},
						},
					},
				},
			},
			"system_rule_switch": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: "Custom rule switch.",
				DiffSuppressFunc: func(k, old, new string, d *schema.ResourceData) bool {
					return d.Get("rule_mode").(string) != "custom"
				},
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"rule_id": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "The ID of rule.",
						},
						"custom_system_rule_switch": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "Custom rule switch.",
						},
					},
				},
			},
			"rule_detail": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Detailed information of the vulnerability rules. By default, only the vulnerability protection rules of the custom mode are displayed.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"rule_set_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "First-level rule category. Only when updating the custom vulnerability rules.",
						},
						"subcategory": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Secondary rule category. Only when updating the custom vulnerability rules.",
						},
						"rule_tag": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Rule label, that is, the complete rule ID. Only when updating the custom vulnerability rules.",
						},
						"rule_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The name of rule. Only when updating the custom vulnerability rules.",
						},
						"risk_level": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Risk grade. Only when updating the custom vulnerability rules.",
						},
						"cve_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The ID of CVE. Only when updating the custom vulnerability rules.",
						},
						"accuracy": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "The accuracy of the rules. Only when updating the custom vulnerability rules.",
						},
						"update_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The update time of the rules. Only when updating the custom vulnerability rules.",
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The description of the rules. Only when updating the custom vulnerability rules.",
						},
					},
				},
			},
		},
	}
	return resource
}

func resourceByteplusWafVulnerabilityCreate(d *schema.ResourceData, meta interface{}) (err error) {
	service := NewWafVulnerabilityService(meta.(*bp.SdkClient))
	err = service.Dispatcher.Create(service, d, ResourceByteplusWafVulnerability())
	if err != nil {
		return fmt.Errorf("error on creating waf_vulnerability %q, %s", d.Id(), err)
	}
	return resourceByteplusWafVulnerabilityRead(d, meta)
}

func resourceByteplusWafVulnerabilityRead(d *schema.ResourceData, meta interface{}) (err error) {
	service := NewWafVulnerabilityService(meta.(*bp.SdkClient))
	err = service.Dispatcher.Read(service, d, ResourceByteplusWafVulnerability())
	if err != nil {
		return fmt.Errorf("error on reading waf_vulnerability %q, %s", d.Id(), err)
	}
	return err
}

func resourceByteplusWafVulnerabilityUpdate(d *schema.ResourceData, meta interface{}) (err error) {
	service := NewWafVulnerabilityService(meta.(*bp.SdkClient))
	err = service.Dispatcher.Update(service, d, ResourceByteplusWafVulnerability())
	if err != nil {
		return fmt.Errorf("error on updating waf_vulnerability %q, %s", d.Id(), err)
	}
	return resourceByteplusWafVulnerabilityRead(d, meta)
}

func resourceByteplusWafVulnerabilityDelete(d *schema.ResourceData, meta interface{}) (err error) {
	service := NewWafVulnerabilityService(meta.(*bp.SdkClient))
	err = service.Dispatcher.Delete(service, d, ResourceByteplusWafVulnerability())
	if err != nil {
		return fmt.Errorf("error on deleting waf_vulnerability %q, %s", d.Id(), err)
	}
	return err
}
