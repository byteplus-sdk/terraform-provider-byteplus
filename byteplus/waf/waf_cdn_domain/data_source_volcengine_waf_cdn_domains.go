package waf_cdn_domain

import (
	bp "github.com/byteplus-sdk/terraform-provider-byteplus/common"
	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/helper/validation"
)

func DataSourceByteplusWafCdnDomains() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceByteplusWafCdnDomainsRead,
		Schema: map[string]*schema.Schema{
			"name_regex": {
				Type:         schema.TypeString,
				Optional:     true,
				ValidateFunc: validation.StringIsValidRegExp,
				Description:  "A Name Regex of Resource.",
			},
			"output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "File name where to save data source results.",
			},
			"total_count": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: "The total count of query.",
			},
			"domain": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "The domain name of the protected website that needs to be queried.",
			},
			"accurate_query": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: "Matching mode.",
			},
			"data": {
				Description: "The collection of query.",
				Type:        schema.TypeList,
				Computed:    true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"region": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "domain region that need to be protected by WAF.",
						},
						"domain": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "domain names that need to be protected by WAF.",
						},
						"cname": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The CNAME value generated by the WAF instance.",
						},
						"certificate_id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Certificate ID, displayed when the protocol type includes HTTPS.",
						},
						"certificate_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Certificate name, displayed when the protocol type includes HTTPS.",
						},
						"lb_algorithm": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The types of load balancing algorithms.",
						},
						"access_mode": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Access mode. If your domain is added from BytePlus CDN, this parameter is set to 6.",
						},
						"public_real_server": {
							Type:     schema.TypeInt,
							Computed: true,
							Description: "Back-to-origin mode of CNAME provisioning." +
								" If your domain is added from BytePlus CDN, the default value is set to 0.",
						},
						"enable_http2": {
							Type:     schema.TypeInt,
							Computed: true,
							Description: "Whether HTTP 2.0 is enabled." +
								" If your domain is added from BytePlus CDN, the default value is set to 0.",
						},
						"enable_ipv6": {
							Type:     schema.TypeInt,
							Computed: true,
							Description: "Whether IPv6 request is enabled." +
								" If your domain is added from BytePlus CDN, the default value is set to 0.",
						},
						"protocol_follow": {
							Type:     schema.TypeInt,
							Computed: true,
							Description: "Whether the protocol following is enabled." +
								" If your domain is added from BytePlus CDN, the default value is set to 0.",
						},
						"proxy_config": {
							Type:     schema.TypeInt,
							Computed: true,
							Description: "Whether the proxy configuration is enabled." +
								" If your domain is added from BytePlus CDN, the default value is set to 0.",
						},
						"client_ip_location": {
							Type:     schema.TypeInt,
							Computed: true,
							Description: "Method to obtain client IP. " +
								"If your domain is added from BytePlus CDN, the default value is set to 0.",
						},
						"tls_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether the Torch Log Service is enabled.",
						},
						"client_max_body_size": {
							Type:     schema.TypeInt,
							Computed: true,
							Description: "Maximum client request body size." +
								" If your domain is added from BytePlus CDN, the default value is set to 0.",
						},
						"keep_alive_time_out": {
							Type:     schema.TypeInt,
							Computed: true,
							Description: "Long connection keep-alive time." +
								" If your domain is added from BytePlus CDN, the default value is set to 0.",
						},
						"keep_alive_request": {
							Type:     schema.TypeInt,
							Computed: true,
							Description: "Long connection reuse count." +
								" If your domain is added from BytePlus CDN, the default value is set to 0.",
						},
						"proxy_connect_time_out": {
							Type:     schema.TypeInt,
							Computed: true,
							Description: "Timeout for establishing connection between WAF and the backend server." +
								" If your domain is added from BytePlus CDN, the default value is set to 0.",
						},
						"proxy_read_time_out": {
							Type:     schema.TypeInt,
							Computed: true,
							Description: "Timeout for WAF to read response from the backend server. " +
								"If your domain is added from BytePlus CDN, the default value is set to 0.",
						},
						"proxy_keep_alive_time_out": {
							Type:     schema.TypeInt,
							Computed: true,
							Description: "Idle persistent connection timeout." +
								" If your domain is added from BytePlus CDN, the default value is set to 0.",
						},
						"proxy_retry": {
							Type:     schema.TypeInt,
							Computed: true,
							Description: "Retry count from WAF to the origin server. " +
								"If your domain is added from BytePlus CDN, the default value is set to 0.",
						},
						"proxy_write_time_out": {
							Type:     schema.TypeInt,
							Computed: true,
							Description: "The timeout for WAF to transfer requests to the backend server." +
								" If your domain is added from BytePlus CDN, the default value is set to 0.",
						},
						"proxy_keep_alive": {
							Type:     schema.TypeInt,
							Computed: true,
							Description: "The number of reusable long connections for WAF to the origin server." +
								" If your domain is added from BytePlus CDN, the default value is set to 0.",
						},
						"attack_status": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "The status of the attack.",
						},
						"defence_mode": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Protection mode of the instance.",
						},
						"enable_sni": {
							Type:     schema.TypeInt,
							Computed: true,
							Description: "Whether the SNI configuration is enabled. " +
								"If your domain is added from BytePlus CDN, the default value is set to 0.",
						},
						"project_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The name of project.",
						},
						"project_follow": {
							Type:     schema.TypeInt,
							Computed: true,
							Description: "Set whether to follow the project to which other resources belong, such as the CDN's project. The default value is set to 0." +
								"0: Do not follow" +
								"1: Follow",
						},
						"status": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Connection status.",
						},
						"waf_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether the vulnerability protection policy is enabled.",
						},
						"cc_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether the cc protection strategy has been enabled.",
						},
						"white_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether the whitelist strategy has been enabled.",
						},
						"black_ip_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether the blacklist strategy has been enabled.",
						},
						"black_lct_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether the regional ban strategy has been activated.",
						},
						"waf_white_req_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether to enable the whitening strategy for vulnerability protection requests.",
						},
						"white_field_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether to enable the whitening strategy for vulnerability protection fields.",
						},
						"custom_rsp_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether the custom response interception strategy has been enabled.",
						},
						"system_bot_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether the managed Bot classification strategy has been enabled.",
						},
						"custom_bot_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether the custom Bot classification strategy has been enabled.",
						},
						"dlp_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether to activate the strategy for preventing the leakage of sensitive information.",
						},
						"api_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether the API protection policy has been enabled.",
						},
						"tamper_proof_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether to enable the page tamper proof policy.",
						},
						"auto_cc_enable": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Whether to enable the intelligent CC protection strategy.",
						},
						"update_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The update time.",
						},
					},
				},
			},
		},
	}
}

func dataSourceByteplusWafCdnDomainsRead(d *schema.ResourceData, meta interface{}) error {
	service := NewWafCdnDomainService(meta.(*bp.SdkClient))
	return service.Dispatcher.Data(service, d, DataSourceByteplusWafCdnDomains())
}
